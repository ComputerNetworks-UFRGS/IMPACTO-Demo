# Generated by Django 4.2.9 on 2025-01-20 23:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AttackType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attack_type', models.CharField(choices=[('malware', 'Malware'), ('phishing', 'Phishing'), ('ddos', 'DDoS'), ('breach', 'Breach')], help_text="Select the type of attack. Example: 'Malware', 'Phishing', 'DDoS', 'Breach'", max_length=20, verbose_name='Attack Type')),
            ],
            options={
                'verbose_name': 'Attack Type',
                'verbose_name_plural': 'Attack Types',
            },
        ),
        migrations.CreateModel(
            name='CompanyAssets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(choices=[('Server', 'Server'), ('database', 'Database'), ('website', 'Website'), ('other', 'Other')], max_length=255, verbose_name='Item')),
                ('value', models.DecimalField(decimal_places=2, max_digits=14, verbose_name='Value')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
            ],
            options={
                'verbose_name': 'Company Asset',
                'verbose_name_plural': 'Company Assets',
            },
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the full legal name of the company.', max_length=255, verbose_name='Name')),
                ('headquarters_country', models.CharField(help_text="Specify the country where the company's main headquarters is located.", max_length=255, verbose_name='Headquarters Country')),
                ('headquarters_country_en', models.CharField(editable=False, max_length=255, verbose_name='Headquarters Country (English)')),
                ('industry_type', models.CharField(choices=[('healthcare', 'Healthcare'), ('government', 'Government'), ('retail', 'Retail'), ('finance', 'Finance'), ('education', 'Education'), ('entertainment', 'Entertainment'), ('technology', 'Technology'), ('others', 'Others')], default='others', help_text='Select the primary industry or sector in which the company operates.', max_length=20, verbose_name='Industry Type')),
                ('employee_count', models.PositiveIntegerField(help_text='Enter the total number of individuals employed by the company.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Employee Count')),
                ('updated_inventory', models.BooleanField(default=False, help_text='Check this box if the company maintains an up-to-date inventory of all assets.', verbose_name='Updated Inventory')),
                ('backup_maintenance', models.BooleanField(default=False, help_text='Check this box if the company maintains regular backups of critical data.', verbose_name='Backup Maintenance')),
                ('risk_prioritization', models.BooleanField(default=False, help_text='Check this box if the company actively prioritizes risks based on their potential impact and likelihood.', verbose_name='Risk Prioritization')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
            ],
            options={
                'verbose_name': 'Company Profile',
                'verbose_name_plural': 'Company Profiles',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the name of the region. Example: 'Brazil', 'Europe'", max_length=255, verbose_name='Region')),
                ('type', models.CharField(choices=[('continent', 'Continent'), ('country', 'Country')], help_text='Select whether this region is a continent or a country', max_length=10)),
                ('continent', models.CharField(blank=True, choices=[('europe', 'Europe'), ('south_america', 'South America'), ('north_america', 'North America'), ('africa', 'Africa'), ('asia', 'Asia'), ('oceania', 'Oceania')], help_text="If this region is a country, select the continent it belongs to. Example: 'Brazil' -> 'South America'", max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'unique_together': {('name', 'type', 'continent')},
            },
        ),
        migrations.CreateModel(
            name='SandboxAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_assets', to='dashboard.companyassets')),
            ],
        ),
        migrations.CreateModel(
            name='Scope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('malware', 'Malware'), ('phishing', 'Phishing'), ('ddos', 'DDoS'), ('breach', 'Breach')], max_length=255, verbose_name='Escopo')),
            ],
            options={
                'verbose_name': 'Escopo',
                'verbose_name_plural': 'Escopos',
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('healthcare', 'Healthcare'), ('government', 'Government'), ('retail', 'Retail'), ('finance', 'Finance'), ('education', 'Education'), ('entertainment', 'Entertainment'), ('technology', 'Technology'), ('others', 'Others')], max_length=255, verbose_name='Setor')),
            ],
            options={
                'verbose_name': 'Setor',
                'verbose_name_plural': 'Setores',
            },
        ),
        migrations.CreateModel(
            name='AdvancedCompanyProfile',
            fields=[
                ('companyprofile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.companyprofile')),
                ('company_size', models.CharField(choices=[('small', 'Small'), ('medium', 'Medium'), ('large', 'Large')], help_text="Select the size of the company. Example: 'Small' (less than 50 employees), 'Medium' (50-250 employees), 'Large' (more than 250 employees)", max_length=10, verbose_name='Company Size')),
                ('remote_work_rate', models.FloatField(help_text='Enter the percentage of employees working remotely. Example: 20.5 for 20.5%', verbose_name='Remote Work Rate')),
                ('global_presence', models.BooleanField(default=False, help_text='Indicate whether the company has a global presence or not', verbose_name='Global Presence')),
                ('authentication_factors', models.PositiveIntegerField(help_text='Enter the number of authentication factors used by the company. Example: 2 for two-factor authentication (2FA)', verbose_name='Authentication Factors')),
                ('cloud_solution_type', models.CharField(choices=[('lan', 'LAN'), ('wan', 'WAN'), ('none', 'None')], help_text="Select the type of cloud solution used by the company. Example: 'LAN' for local area network, 'WAN' for wide area network, 'None' if no cloud solution is used", max_length=20, verbose_name='Cloud Solution Type')),
                ('it_system_monitoring', models.BooleanField(default=False, help_text='Indicate whether the company has IT system monitoring in place', verbose_name='IT System Monitoring')),
                ('periodic_system_updates', models.BooleanField(default=False, help_text='Indicate whether the company performs periodic system updates', verbose_name='Periodic System Updates')),
                ('data_encryption_in_storage', models.BooleanField(default=False, help_text='Indicate whether the company encrypts data at rest (in storage)', verbose_name='Data Encryption in Storage')),
                ('data_encryption_in_transit', models.BooleanField(default=False, help_text='Indicate whether the company encrypts data in transit (during transmission)', verbose_name='Data Encryption in Transit')),
                ('vpn_for_remote_access', models.BooleanField(default=False, help_text='Indicate whether the company uses a VPN for remote access', verbose_name='VPN for Remote Access')),
                ('cybersecurity_awareness_and_training', models.BooleanField(default=False, help_text='Indicate whether the company provides cybersecurity awareness and training', verbose_name='Cybersecurity Awareness and Training')),
                ('documented_response_plan', models.BooleanField(default=False, help_text='Indicate whether the company has a documented response plan', verbose_name='Documented Response Plan')),
                ('response_plan_update', models.BooleanField(default=False, help_text='Indicate whether the company regularly updates its response plan', verbose_name='Response Plan Update')),
                ('operational_recovery_capacity', models.BooleanField(default=False, help_text='Indicate whether the company has operational recovery capacity', verbose_name='Operational Recovery Capacity')),
                ('credentials_maintenance', models.BooleanField(default=False, help_text='Indicate whether the company performs regular credentials maintenance', verbose_name='Credentials Maintenance')),
                ('vulnerability_identification', models.BooleanField(default=False, help_text='Indicate whether the company has a process for identifying vulnerabilities', verbose_name='Vulnerability Identification')),
                ('network_systems_traffic_monitoring', models.BooleanField(default=False, help_text='Indicate whether the company monitors network systems traffic', verbose_name='Network Systems Traffic Monitoring')),
                ('threat_identification_process', models.BooleanField(default=False, help_text='Indicate whether the company has a process for identifying threats', verbose_name='Threat Identification Process')),
                ('it_records_presence', models.BooleanField(default=False, help_text='Indicate whether the company maintains IT records', verbose_name='IT Records Presence')),
                ('antivirus', models.BooleanField(default=False, help_text='Indicate whether the company uses antivirus software', verbose_name='Antivirus')),
                ('firewall', models.BooleanField(default=False, help_text='Indicate whether the company uses a firewall', verbose_name='Firewall')),
                ('intrusion_detection_system', models.BooleanField(default=False, help_text='Indicate whether the company uses an intrusion detection system (IDS)', verbose_name='Intrusion Detection System (IDS)')),
                ('endpoint_detection_and_response', models.BooleanField(default=False, help_text='Indicate whether the company uses an endpoint detection and response (EDR) system', verbose_name='Endpoint Detection and Response (EDR)')),
                ('it_security_team', models.BooleanField(default=False, help_text='Indicate whether the company has a dedicated IT security team', verbose_name='IT Security Team')),
            ],
            options={
                'verbose_name': 'Advanced Company Profile',
                'verbose_name_plural': 'Advanced Company Profiles',
            },
            bases=('dashboard.companyprofile',),
        ),
        migrations.CreateModel(
            name='SandboxCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_on', models.BooleanField(default=False)),
                ('alpha', models.DecimalField(decimal_places=8, default=0.001, max_digits=14, verbose_name='alpha')),
                ('saved_alpha', models.DecimalField(decimal_places=8, default=0.001, max_digits=14, verbose_name='alpha')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sandbox_profile', to='dashboard.companyprofile')),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='SandboxCompany', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='SandboxAttack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impact_direct', models.CharField(choices=[('Alto', 'Alto'), ('Medio', 'Medio'), ('Baixo', 'Baixo')], default='Medio', max_length=255, verbose_name='Direct_impact')),
                ('impact_indirect', models.CharField(choices=[('Alto', 'Alto'), ('Medio', 'Medio'), ('Baixo', 'Baixo')], default='Medio', max_length=255, verbose_name='Indirect_impact')),
                ('name', models.CharField(choices=[('Malware', 'Malware'), ('Phishing', 'Phishing'), ('DDoS', 'DDoS'), ('Geral', 'Geral')], default='', max_length=255, verbose_name='Name')),
                ('value', models.IntegerField(default=0, verbose_name='Value')),
                ('prob', models.DecimalField(decimal_places=4, default=0, max_digits=14, verbose_name='Prob')),
                ('invest', models.IntegerField(default=0, verbose_name='Invested')),
                ('save_value', models.IntegerField(default=0, verbose_name='Saved Value')),
                ('save_prob', models.DecimalField(decimal_places=4, default=0, max_digits=14, verbose_name='Saved Prob')),
                ('save_invest', models.IntegerField(default=0, verbose_name='Saved Invested')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sandbox_asset', to='dashboard.sandboxasset')),
            ],
        ),
        migrations.AddField(
            model_name='sandboxasset',
            name='sandbox_company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sandbox_profile', to='dashboard.sandboxcompany'),
        ),
        migrations.CreateModel(
            name='RiskAndEconomic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_profile_type', models.BooleanField(default=False, help_text="Enter the company's profile type", verbose_name='Profile Type of a Company')),
                ('final_score', models.FloatField(blank=True, default=0, help_text='Enter the final score', null=True, verbose_name='Final Score')),
                ('text_score', models.CharField(blank=True, help_text='Write the text score', max_length=64, verbose_name='Text Score')),
                ('malware_region_value', models.FloatField(blank=True, default=0, help_text='Enter the malware region value', null=True, verbose_name='Region Value')),
                ('malware_sector_value', models.FloatField(blank=True, default=0, help_text='Enter the malware sector value', null=True, verbose_name='Sector Value')),
                ('malware_resilience_value', models.FloatField(blank=True, default=0, help_text='Enter the malware resilience value', null=True, verbose_name='Resilience Value')),
                ('malware_final_score', models.FloatField(blank=True, default=0, help_text='Enter the malware final score', null=True, verbose_name='Malware Final Score')),
                ('phishing_region_value', models.FloatField(blank=True, default=0, help_text='Enter the phishing region value', null=True, verbose_name='Region Value')),
                ('phishing_sector_value', models.FloatField(blank=True, default=0, help_text='Enter the phishing sector value', null=True, verbose_name='Sector Value')),
                ('phishing_resilience_value', models.FloatField(blank=True, default=0, help_text='Enter the phishing resilience value', null=True, verbose_name='Resilience Value')),
                ('phishing_final_score', models.FloatField(blank=True, default=0, help_text='Enter the phishing final score', null=True, verbose_name='Phishing Final Score')),
                ('ddos_region_value', models.FloatField(blank=True, default=0, help_text='Enter the DDoS region value', null=True, verbose_name='Region Value')),
                ('ddos_sector_value', models.FloatField(blank=True, default=0, help_text='Enter the DDoS sector value', null=True, verbose_name='Sector Value')),
                ('ddos_resilience_value', models.FloatField(blank=True, default=0, help_text='Enter the DDoS resilience value', null=True, verbose_name='Resilience Value')),
                ('ddos_final_score', models.FloatField(blank=True, default=0, help_text='Enter the DDoS final score', null=True, verbose_name='DDoS Final Score')),
                ('insights_pos', models.JSONField(blank=True, default=list, verbose_name='Insights Positivos')),
                ('insights_neg', models.JSONField(blank=True, default=list, verbose_name='Insights Negativos')),
                ('malware_succ', models.FloatField(blank=True, help_text='Enter the malware success rate', null=True, verbose_name='Malware Success Rate')),
                ('phishing_succ', models.FloatField(blank=True, help_text='Enter the phishing success rate', null=True, verbose_name='Phishing Success Rate')),
                ('ddos_succ', models.FloatField(blank=True, help_text='Enter the ddos success rate', null=True, verbose_name='DDoS Success Rate')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risks_and_economics', to='dashboard.companyprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome do Report')),
                ('year', models.IntegerField(verbose_name='Ano')),
                ('years_covered', models.CharField(max_length=255, verbose_name='Anos Cobertos')),
                ('company', models.CharField(max_length=255, verbose_name='Empresa')),
                ('number_of_participants', models.IntegerField(blank=True, null=True, verbose_name='Número de Participantes')),
                ('participant_profiles', models.CharField(choices=[('real_devices', 'Real-world devices'), ('real_cases', 'Real-world cases'), ('experts', 'Experts'), ('organizations', 'Organizations'), ('others', 'Others')], default='others', max_length=255, verbose_name='Perfil dos Participantes')),
                ('regions', models.ManyToManyField(blank=True, to='dashboard.region', verbose_name='Regiões Específicas')),
                ('scopes', models.ManyToManyField(to='dashboard.scope', verbose_name='Escopos')),
                ('sectors', models.ManyToManyField(blank=True, to='dashboard.sector', verbose_name='Setores')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='CyberSecurityData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prob_a_priori', models.CharField(help_text='Tipo de ameaça ou evento de segurança', max_length=255, verbose_name='Probabilidade A Priori')),
                ('prob_marginal', models.CharField(help_text='Contexto ou localização da ameaça', max_length=255, verbose_name='Probabilidade Marginal')),
                ('p_a_given_b', models.DecimalField(blank=True, decimal_places=2, help_text='Probabilidade condicional de A dado B', max_digits=5, null=True, verbose_name='P(A|B)')),
                ('c', models.CharField(blank=True, help_text='Descrição ou contexto adicional relacionado ao dado de cibersegurança', max_length=255, null=True, verbose_name='C')),
                ('p_c_given_p_a_given_b', models.DecimalField(blank=True, decimal_places=2, help_text='Probabilidade condicional de C dado P(A|B)', max_digits=5, null=True, verbose_name='P(C|P(A|B))')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('report', models.ForeignKey(help_text='Report de origem desta informação', on_delete=django.db.models.deletion.CASCADE, related_name='cyber_security_data', to='dashboard.report', verbose_name='Report')),
            ],
            options={
                'verbose_name': 'Dado de Cibersegurança',
                'verbose_name_plural': 'Dados de Cibersegurança',
                'ordering': ['-data_criacao'],
            },
        ),
        migrations.AddField(
            model_name='companyassets',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_assets', to='dashboard.companyprofile'),
        ),
        migrations.CreateModel(
            name='UserCompanyCopy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('original_company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_copies', to='dashboard.companyprofile', verbose_name='Original Company Profile')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_copies', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Company Copy',
                'verbose_name_plural': 'User Company Copies',
                'unique_together': {('user', 'original_company')},
            },
        ),
        migrations.CreateModel(
            name='CybersecuritySpending',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14, verbose_name='Cybersecurity Spending')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cybersecurity_spendings', to='dashboard.companyprofile')),
            ],
            options={
                'verbose_name': 'Cybersecurity Spending',
                'verbose_name_plural': 'Cybersecurity Spendings',
                'unique_together': {('company', 'year')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='companyassets',
            unique_together={('company', 'item')},
        ),
        migrations.CreateModel(
            name='AnnualRevenue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14, verbose_name='Annual Revenue')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro', verbose_name='Data de Criação')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro', verbose_name='Data de Atualização')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annual_revenues', to='dashboard.companyprofile')),
            ],
            options={
                'verbose_name': 'Annual Revenue',
                'verbose_name_plural': 'Annual Revenues',
                'unique_together': {('company', 'year')},
            },
        ),
        migrations.CreateModel(
            name='AttackHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(help_text='Enter the year in which the attack occurred. Example: 2023', verbose_name='Year')),
                ('count', models.PositiveIntegerField(default=1, help_text='Enter the number of attacks of this type that occurred in the specified year. Example: 3', verbose_name='Count')),
                ('attack_type', models.ForeignKey(help_text="Select the type of attack. Example: 'Malware', 'Phishing', 'DDoS', 'Breach'", on_delete=django.db.models.deletion.CASCADE, related_name='attack_histories', to='dashboard.attacktype')),
                ('company', models.ForeignKey(help_text='Select the company for which the attack history is being recorded', on_delete=django.db.models.deletion.CASCADE, related_name='attack_histories', to='dashboard.advancedcompanyprofile')),
            ],
            options={
                'verbose_name': 'Attack History',
                'verbose_name_plural': 'Attack Histories',
                'unique_together': {('company', 'attack_type', 'year')},
            },
        ),
    ]
